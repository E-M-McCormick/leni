please use: target_fx = "cubic_multiphase_betaN"')
fx <- paste0(
"yN - (h/2)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","h")
} else if(grepl(target_fx, "cubic_multiphase_betaN")){
fx <- paste0(
"yN - (betaN*d/3)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","betaN")
} else if(!is.character(target_fx) & !is.expression(target_fx)) {
stop(tidymessage('Unable to parse target function as a
string for conversion to expression.'))
} else {
if(is.null(theta)){stop(tidymessage(
"Parameters not specified in theta. Unable to parse target function."
))}
fx <- str2expression(target_fx)
theta <- theta
}
return(list(fx, theta))
}
leni_sem <- function(
target_fx = "cubic",
theta = NULL,
start_values = NULL,
number_obs = 5,
center_obs = 1,
spacing = 1,
verbose = FALSE,
y.name = NULL,
time.name = NULL
){
# Check Initial arguments
if(is.null(target_fx)){stop('Target function is not defined. Stopping...')}
if(is.null(y.name)){y.name = "y."}
if(is.null(time.name)){time.name = "x_ti"}
if(grepl(time.name, target_fx)){
stop(tidymessage('Unable to find the time-related variable within the target
function (e.g., "x_ti"). Please use the time.name
argument to specify if you are using a custom
variable name.'))}
# Define Time Points
t <- if(length(spacing == 1)){
seq(1, (spacing*number_obs), by = spacing)
} else if(length(spacing > 1)) {
c(1, 1 + cumsum(spacing))
}
# Define Target Function & Parameters
c(fx, theta) %tin% nonlinear_function_library(target_fx = target_fx,
theta = theta,
time.name = time.name)
# Define Start Values
if(is.null(start_values)){start_values <- rep(0, length(theta))
} else if(length(start_values) != length(theta)){
stop(tidymessage('Length of start values does not equal the number of
parameters in the target function. Please adjust the input
arguments.'))
}
names(start_values) <- theta
# Define Mean Function
suppressWarnings(mean_fx <- stringi::stri_replace_all_regex(
fx, theta, paste0(theta,"_m"), vectorize_all = FALSE) |>
str2expression())
# Define Item Intercepts and Residuals
item_intercepts <- sprintf("%1$s%2$d ~ nu.%2$d*1;", y.name, t) |>
paste(collapse = "\n")
item_residuals <- sprintf("%1$s%2$d ~~ epsilon.%2$d*%1$s%2$d;", y.name, t) |>
paste(collapse = "\n")
# Define Latent Factors
define_factors <- lapply(theta, function(x){
paste0(x," =~ ",
paste(sprintf(paste0(x,".%2$d*%1$s%2$d"), y.name, t),
collapse = " + "),";")
}) |> paste(collapse = "\n")
factor_means <- sprintf("%s ~ 0*1;", theta)|>
paste(collapse = "\n")
factor_covar <- outer(theta,theta, "paste", sep = " ~~ ")[
lower.tri(outer(theta,theta, "paste", sep = " ~~ "), diag = TRUE)
] |> paste(collapse = "; \n")
## Define Phantoms for Latent Means
define_phantoms <- lapply(theta, function(x){
sprintf('%1$s_ph =~ 0; %1$s_ph ~ NA*1 + label("%1$s_m")*1 + %2$s?1;',
x, start_values[x])
}) |> paste(collapse = "\n")
# Define Constraints
## Item Intercept Constraints
nu_constraints <- sprintf(
paste0("nu.%1$d == ", gsub("x_ti", "%2$f", mean_fx),";"), t, t-center_obs
) |> paste(collapse = "\n")
## Factor Loading Constraints
lambda_constraints <- lapply(paste0(theta,"_m"), function(x){
if(grepl("x_ti",
D(mean_fx, x) |>
deparse1(width.cutoff = 500, collapse = ""),
fixed = TRUE)){
sprintf(paste0(
substr(x, 1, nchar(x)-2),
".%1$d == ",
D(mean_fx, x) |>
deparse1(width.cutoff = 500, collapse = "") |>
gsub("x_ti","%2$f",x = _),
";"
), t, t-center_obs) |> paste(collapse = "\n")
} else {
sprintf(paste0(
substr(x, 1, nchar(x)-2),
".%1$d == ",
D(mean_fx, x) |>
deparse1(width.cutoff = 500, collapse = ""),
";"
), t) |> paste(collapse = "\n")
}
}) |> paste(collapse = "\n\n")
model.syntax <-paste(
c("# Define Factors",define_factors, factor_means, factor_covar,
"# Define Phantoms", define_phantoms,
"# Define Items", item_intercepts, item_residuals,
"# Define Constraints",nu_constraints, lambda_constraints),
collapse = "\n\n")
if(verbose) cat(model.syntax)
return(model.syntax)
}
test <- leni_sem("cubic")
test <- leni_sem("cubic", verbose = T)
test <- leni_sem("quadratic", verbose = T)
paste0("lower-((upper-lower)/(1+(",time.name,"/xN)^(hill)))") |>
str2expression()
paste0("lower-((upper-lower)/(1+(","x_t","/xN)^(hill)))") |>
str2expression()
D(paste0("lower-((upper-lower)/(1+(","x_t","/xN)^(hill)))") |>
str2expression(),"xN")
nonlinear_function_library <- function(target_fx = NULL, theta = NULL,
time.name = NULL){
## Quadratic Functions
if(grepl(target_fx,"quadratic")){
tidymessage('Defaulting to the standard alternative quadratic from
Cudeck & du Toit, 2002. For the other alternatives
please use: target_fx = "quadratic_gamma_a0",
"quadratic_gamma_ay", or "quadratic_ac"')
fx <- paste0("ay - (ay - a0)*((",time.name," / ax) - 1)^2") |>
str2expression()
theta <- c("a0","ax","ay")
} else if(grepl(target_fx,"quadratic_gamma_a0")) {
fx <- paste0("a0 - gamma*(((",time.name," / ax) - 1)^2 - 1)") |>
str2expression()
theta <- c("a0","ax","gamma")
} else if(grepl(target_fx,"quadratic_gamma_ay")){
fx <- paste0("ay - gamma*((",time.name," / ax) - 1)^2") |>
str2expression()
theta <- c("ax","ay","gamma")
} else if(grepl(target_fx,"quadratic_ac")){
fx <- paste0("ay + ac*(",time.name," - ax)^2") |>
str2expression()
theta <- c("ax","ay","ac")
## Cubic Functions
} else if(grepl(target_fx,"cubic") |
grepl(target_fx, "cubic_h")){
tidymessage('Defaulting to the alternative cubic with h from
McCormick, 2024. For the version with betaN
please use: target_fx = "cubic_betaN"')
fx <- paste0("yN - (h/2)*(((",time.name,"-xN)/d)^3 -
3*((",time.name,"-xN)/d))") |>
str2expression()
theta <- c("xN","yN","d","h")
} else if(grepl(target_fx,"cubic_betaN")){
fx <- paste0("yN - (betaN*d/3)*(((",time.name,"-xN)/d)^3 -
3*((",time.name,"-xN)/d))") |>
str2expression()
theta <- c("xN","yN","d","betaN")
## Multiphase Functions
} else if(grepl(target_fx, "cubic_multiphase") |
grepl(target_fx, "cubic_multiphase_h")){
tidymessage('Defaulting to the alternative multiphase cubic with h from
McCormick, 2024. For the version with betaN
please use: target_fx = "cubic_multiphase_betaN"')
fx <- paste0(
"yN - (h/2)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","h")
} else if(grepl(target_fx, "cubic_multiphase_betaN")){
fx <- paste0(
"yN - (betaN*d/3)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","betaN")
## Logistic Functions
} else if(grepl(target_fx, "1PL")){
fx <- paste0("lower-(1/(1+(",time.name,"/xN)^(-xN/2)))") |>
str2expression()
theta <- c("xN")
} else if(grepl(target_fx, "2PL")){
fx <- paste0("(1/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("xN","hill")
} else if(grepl(target_fx, "3PL")){
fx <- paste0("lower+((1-lower)/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("lower","xN","hill")
} else if(grepl(target_fx, "4PL")){
fx <- paste0("lower+((upper-lower)/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("lower","upper","xN","hill")
## Stop on Improper target_fx inputs
} else if(!is.character(target_fx) & !is.expression(target_fx)) {
stop(tidymessage('Unable to parse target function as a
string for conversion to expression.'))
## Custom Target Function
} else {
if(is.null(theta)){stop(tidymessage(
"Parameters not specified in theta. Unable to parse target function."
))}
fx <- str2expression(target_fx)
theta <- theta
}
return(list(fx, theta))
}
test <- leni_sem("4PL", verbose = T)
test <- leni_sem("3PL", verbose = T)
test <- leni_sem("2PL", verbose = T)
test <- leni_sem("1PL", verbose = T)
nonlinear_function_library <- function(target_fx = NULL, theta = NULL,
time.name = NULL){
## Quadratic Functions
if(grepl(target_fx,"quadratic")){
tidymessage('Defaulting to the standard alternative quadratic from
Cudeck & du Toit, 2002. For the other alternatives
please use: target_fx = "quadratic_gamma_a0",
"quadratic_gamma_ay", or "quadratic_ac"')
fx <- paste0("ay - (ay - a0)*((",time.name," / ax) - 1)^2") |>
str2expression()
theta <- c("a0","ax","ay")
} else if(grepl(target_fx,"quadratic_gamma_a0")) {
fx <- paste0("a0 - gamma*(((",time.name," / ax) - 1)^2 - 1)") |>
str2expression()
theta <- c("a0","ax","gamma")
} else if(grepl(target_fx,"quadratic_gamma_ay")){
fx <- paste0("ay - gamma*((",time.name," / ax) - 1)^2") |>
str2expression()
theta <- c("ax","ay","gamma")
} else if(grepl(target_fx,"quadratic_ac")){
fx <- paste0("ay + ac*(",time.name," - ax)^2") |>
str2expression()
theta <- c("ax","ay","ac")
## Cubic Functions
} else if(grepl(target_fx,"cubic") |
grepl(target_fx, "cubic_h")){
tidymessage('Defaulting to the alternative cubic with h from
McCormick, 2024. For the version with betaN
please use: target_fx = "cubic_betaN"')
fx <- paste0("yN - (h/2)*(((",time.name,"-xN)/d)^3 -
3*((",time.name,"-xN)/d))") |>
str2expression()
theta <- c("xN","yN","d","h")
} else if(grepl(target_fx,"cubic_betaN")){
fx <- paste0("yN - (betaN*d/3)*(((",time.name,"-xN)/d)^3 -
3*((",time.name,"-xN)/d))") |>
str2expression()
theta <- c("xN","yN","d","betaN")
## Multiphase Functions
} else if(grepl(target_fx, "cubic_multiphase") |
grepl(target_fx, "cubic_multiphase_h")){
tidymessage('Defaulting to the alternative multiphase cubic with h from
McCormick, 2024. For the version with betaN
please use: target_fx = "cubic_multiphase_betaN"')
fx <- paste0(
"yN - (h/2)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","h")
} else if(grepl(target_fx, "cubic_multiphase_betaN")){
fx <- paste0(
"yN - (betaN*d/3)*(
(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d)^3 -
3*(((1/2)*(sqrt((xN-d-",time.name,")^2)-
sqrt((",time.name,"-xN-d)^2)))/d))"
) |> str2expression()
theta <- c("xN","yN","d","betaN")
## Logistic Functions
} else if(grepl(target_fx, "1PL")){
fx <- paste0("(1/(1+(",time.name,"/xN)^(-xN/2)))") |>
str2expression()
theta <- c("xN")
} else if(grepl(target_fx, "2PL")){
fx <- paste0("(1/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("xN","hill")
} else if(grepl(target_fx, "3PL")){
fx <- paste0("lower+((1-lower)/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("lower","xN","hill")
} else if(grepl(target_fx, "4PL")){
fx <- paste0("lower+((upper-lower)/(1+(",time.name,"/xN)^(-hill)))") |>
str2expression()
theta <- c("lower","upper","xN","hill")
## Stop on Improper target_fx inputs
} else if(!is.character(target_fx) & !is.expression(target_fx)) {
stop(tidymessage('Unable to parse target function as a
string for conversion to expression.'))
## Custom Target Function
} else {
if(is.null(theta)){stop(tidymessage(
"Parameters not specified in theta. Unable to parse target function."
))}
fx <- str2expression(target_fx)
theta <- theta
}
return(list(fx, theta))
}
test <- leni_sem("1PL", verbose = T)
#| warning: false
#| message: false
teachman <- read.csv("data/teachman-2006.csv")
teachman <- read.csv("../data/teachman-2006.csv")
cross_sectional_LM <- lm(y ~ x + I(x^2) + I(x^3), data = teachman)
cross_sectional_LM$model
cross_sectional_LM$coefficients
cross_sectional_LM$coefficients <- 10
summary(cross_sectional_LM)
cross_sectional_LM <- lm(y ~ x + I(x^2) + I(x^3), data = teachman)
summary(cross_sectional_LM)
summary(cross_sectional_LM$coefficients[1] = 10)
summary(cross_sectional_LM$coefficients[1] <- 10)
cross_sectional_LM$coefficients[1] <- 10
cross_sectional_LM$coefficients
summary(cross_sectional_LM)
model = cross_sectional_LM
coef(model)
names(coef(model))
grepl("^2",names(coef(model)))
substr("^2",names(coef(model)))
str_detect("^2",names(coef(model)))
grep("^2",names(coef(model)))
grep("^2",c(names(coef(model))))
grep("I",c(names(coef(model))))
grep(".*^2.*",c(names(coef(model))))
grep("*^2*",c(names(coef(model))))
grep("^2",c(names(coef(model))))
grep("^2)",c(names(coef(model))))
grep("I(x^2",c(names(coef(model))))
grep("*^2",c(names(coef(model))))
grep("*^2*",c(names(coef(model))))
grep(".*^2.*",c(names(coef(model))))
grep(".*\^2.*",c(names(coef(model))))
grep("\^2)",c(names(coef(model))))
grep("^\^2)",c(names(coef(model))))
grep("^*\^2)",c(names(coef(model))))
grep("\\^2)",c(names(coef(model))))
poly(degree = 3)
poly(x, degree = 3)
lm(y ~ poly(x,3), data = teachman)
grep("poly(, 2)", names(coef(lm(formula = y ~ poly(x, 3), data = teachman))))
grep("poly(, 3)", names(coef(lm(formula = y ~ poly(x, 3), data = teachman))))
grep("poly(, 3)*", names(coef(lm(formula = y ~ poly(x, 3), data = teachman))))
grepl("poly(, 3)*", names(coef(lm(formula = y ~ poly(x, 3), data = teachman))))
any(grepl("poly(, 3)*", names(coef(lm(formula = y ~ poly(x, 3), data = teachman)))))
grep("\\^3)",names(coef(model)))
f_a0 <- expression(b0)
f_ax <- expression(-b1/(2 * b2))
f_ay <- expression(b0 - (b1^2/(4 * b2)))
model
# Linear Model Parameters
c(b0,b1,b2) %tin% coef(model)
# Helper Functions
`%tin%` <- function(x, y) {
mapply(assign, as.character(substitute(x)[-1]), y,
MoreArgs = list(envir = parent.frame()))
invisible()
}
# Linear Model Parameters
c(b0,b1,b2) %tin% coef(model)
# Linear Model Parameters
c(b0,b1,b2) %tin% coef(model)[1:3]
beta = coef(model)
beta = coef(model)[1:3]
beta
names(beta) = c("b0","b1","b2")
beta
D(f_a0, beta)
D(f_a0, names(beta))
stats::numericDeriv(f_a0, names(beta))
stats::numericDeriv(f_a0, c("b0")
)
stats::numericDeriv(expr=f_a0, theta=c("b0"))
stats::numericDeriv(expr=quote(b1 / b0*b2), theta=c("b0"))
stats::numericDeriv(expr=quote(m*x + b), theta=c("m"))
stats::numericDeriv(expr=quote(m*x + b), theta=c("m"))
D(quote(m*x+b),"m")
install.packages("calculus")
?calculus::derivative
calculus::derivative(expression(m*x+b), var=c("m"))
calculus::derivative(expression(m*x+b), var=c(m))
calculus::derivative(expression(m*x+b), var=c("b"))
calculus::derivative(expression(m*x+b), var=c("m","b"))
calculus::derivative(expression(m*x+b), var=c("m","b","q"))
calculus::derivative(expression(m*x+b), var=c("m","b","q"), deparse = F)
D(expression(m*x+b), "m")
calculus::derivative(expression(m*x+b), var=c("m","b","q"), deparse = T) |> str2expression()
calculus::derivative(expression(m*x+b), var=c("m","b","q"), deparse = T)
calculus::jacobian(expression(m*x+b), var=c("m","b","q"))
f <- function(x, y) y^2*sin(x)
derivative(f = f, var = c(x=0, y=0), order = c(1,2))
f <- function(x, y) y^2*sin(x)
calculus::derivative(f = f, var = c(x=0, y=0), order = c(1,2))
f <- function(x, y) c(x^2, y^2)
derivative(f, var = c(x=0, y=0), order = 2)
f <- function(x, y) c(x^2, y^2)
calculus::derivative(f, var = c(x=0, y=0), order = 2)
f <- function(x, y) c(x^2, y^2)
calculus::derivative(f, var = c(x=0, y=0), order = 1)
set.seed(93743)
Nsubs <- 250
alpha <- c(1, 2, 8)
quad.ols <- data.frame(x = runif(Nsubs, -1, 5)) |>
dplyr::mutate(y = rnorm(Nsubs,
mean = alpha[3] -
(alpha[3] - alpha[1])*
((x / alpha[2]) - 1)^2,
sd = 0),
y = y + rnorm(Nsubs, mean = 0, sd = sd(y)),
x2 = x^2)
model = lm(y ~ 1 + I(x) + I(x^2), data = quad.ols)
# Try to automatically parse target function
if(is.null(target_fx)){
if(length(coef(model)) == 3) target_fx <- "quadratic"
if(grepl("\\^3)",names(coef(model))) |
any(grepl("poly(, 3)*",names(coef(model))))) {
target_fx <- "cubic"
} else if(grepl("\\^2)",names(coef(model))) |
any(grepl("poly(, 2)*",names(coef(model))))){
target_fx <- "quadratic"
}
}
target_fx = NULL
# Try to automatically parse target function
if(is.null(target_fx)){
if(length(coef(model)) == 3) target_fx <- "quadratic"
if(grepl("\\^3)",names(coef(model))) |
any(grepl("poly(, 3)*",names(coef(model))))) {
target_fx <- "cubic"
} else if(grepl("\\^2)",names(coef(model))) |
any(grepl("poly(, 2)*",names(coef(model))))){
target_fx <- "quadratic"
}
}
grepl("\\^3)",names(coef(model)))
# Try to automatically parse target function
if(is.null(target_fx)){
if(length(coef(model)) == 3) target_fx <- "quadratic"
if(any(grepl("\\^3)",names(coef(model)))) |
any(grepl("poly(, 3)*",names(coef(model))))) {
target_fx <- "cubic"
} else if(any(grepl("\\^2)",names(coef(model)))) |
any(grepl("poly(, 2)*",names(coef(model))))){
target_fx <- "quadratic"
}
}
paste0("b",seq(0,3))
eval(paste0("b",seq(0,3)))
assign(paste0("b",seq(0,3))) %tin% coef(model)
summary(model)
assign(paste0("b",seq(0,3)), coef(model))
assign(paste0("b",seq(0,3)), %tin% coef(model))
assign(paste0("b",seq(0,3))) %tin% coef(model)
paste0("b",seq(0,3)) %tin% coef(model)
str2lang(paste0("b",seq(0,3))) %tin% coef(model)
parse(paste0("b",seq(0,3))) %tin% coef(model)
eval(parse(paste0("b",seq(0,3)))) %tin% coef(model)
do.call("<-",list(paste0("b",seq(0,3)), coef(model)))
do.call("%tin%",list(paste0("b",seq(0,3)), coef(model)))
do.call("%tin%",list(paste0("b",seq(0,2)), coef(model)))
rm(b,b1,b2,b3)
rm(b0)
rm(beta)
do.call("%tin%",list(paste0("b",seq(0,2)), coef(model)))
coef(model)
test %tin% coef(model)
do.call("<-",list(paste0("b",seq(0,2)), coef(model)))
paste0("b",seq(0,2))
do.call("<-",list(paste0("b",seq(0,2)), coef(model)))
rm(b0,b1,b2)
do.call("<-",list(paste0("b",seq(0,2)), coef(model)))
as.name(paste0("b",seq(0,3))) %tin% coef(model)
beta
# Linear Model Parameters
beta <- coef(model)
beta
devtools::document()
devtools::build()
devtools::document()
devtools::install_github("E-M-McCormick/leni")
?leni_sem
devtools::check_win_release()
